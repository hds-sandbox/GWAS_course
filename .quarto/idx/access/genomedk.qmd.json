{"title":"Accessing the GWAS workshop on GenomeDK","markdown":{"yaml":{"layout":"webpage","title":"Accessing the GWAS workshop on GenomeDK","parent":"Access","has_children":false,"nav_order":2,"hide":["footer","toc"]},"headingText":"Singularity container","containsRefs":false,"markdown":"\n\nIf you are using GenomeDK, you have two options. One is to use a pre-packaged Docker container, which contains jupyterlab and the necessary packages to run all the notebooks. GenomeDK comes with `singularity`, which can import and execute Docker containers and is able to ensure full reproducibility of the analysis. The second option is to download the github repository of the course and create your own conda environment: this solution works also on any computing cluster where you can have `conda` installed and is shown in the page dedicate to the access with [any computing cluster](./otherHPC.qmd).\n\n:::{.callout-warning title=\"Technical prerequisites\"}\n\n- if you do not yet have an account on GenomeDK, please get one [Click on this link to get to the account request.](https://console.genome.au.dk/user-requests/create/) and follow the instructions for the 2-factor authentication.\n\n- you need to have (or be part of) an active project on GenomeDK. This ensures you can get some computing resources to run the course material. [Follow these instructions to request a project.](https://genome.au.dk/docs/projects-and-accounting/#requesting-a-project). Please do not create a project only to run this course, but use an existing project folder.\n\n- In Windows and the Powershell command line, commands might need `.exe` at the end, such as `ssh.exe` instead of `ssh`. Newer versions of Windows do not require that, though.\n:::\n\n\n**1.** Log into the cluster using the command line, and substituting `USERNAME` with your actual user name:\n\n```{.bash}\nssh USERNAME@login.genome.au.dk\n```\n\nand be sure to run those two commands to remove space-filling cache data, which can make everything slower after a few times you run tutorials\n\n```{.bash}\n\nrm -rf ~/.apptainer/cache/*\nrm -rf ~/.singularity/cache/*\n\n```\n\n**2.** Get into a folder inside your project, for example\n\n```{.bash}\n\ncd MYPROJECT/ngsSummerSchool\n\n```\n\n:::{.callout-warning}\n\nDo not work directly in your home folder `/home/username`, as this has a limit of 100GB of space available. Work instead inside a previously established project folder. \n\n:::\n\n**3.** Use `singularity` to download the container of the course. This will take some time and show a lot of text, and at the end a file called `course.sif` is created into the folder.\n\n```{.bash}\n\nsingularity pull course.sif docker://hdssandbox/ngssummerschool:2024.07\n\n```\n\n:::{.callout-warning}\n\nYou need to do this step only once!\n\n:::\n\n**4.**  Activate `tmux`: this will make things run in backround. If you lose your internet connection, the course material will still be up and running when the connection is back on your pc! Use the command \n\n\n```{.bash}\n\ntmux\n\n```\n\nThe command line will change a bit its aspect. Now it's time to get a few resources to run all the material. We suggest one CPU and 32GB of RAM for the first three modules, and 2 CPUs and 64GB of RAM for the single-cell analysis. For the first configuration suggested, for example, you get resources using \n\n```{.bash}\nsrun --mem=32g --cores=1 --time=4:0:0  --account=MYPROJECT --pty /bin/bash\n\n```\n\n:::{.callout-note}\n\nNote you always need your project name, and you can also choose for how long you want the resources to be available to you. **Asking for resources means waiting for some time in a queue before they are assigned.** \n\nIn the example above `time` is 4 hours. After this time, whatever you are doing will be closed, so be sure to save your work in progress.\n\n:::\n\n**5.**  execute the container with \n\n```{.bash}\nsingularity exec course.sif /bin/bash\n```\n\nNote that the command line shows now `Apptainer>` on its left. We are *inside* the container and the tools we need are now available into it.\n\n**6.** Now we need to run a configuration script, which will setup the last details and execute jupyterlab. If a folder called `Data` exists, it will not be downloaded again (also meaning that you can use our container with your own data folder for your own analysis in future)\n\n```{.bash}\ngit config --global http.sslVerify false\nwget -qO-  https://raw.githubusercontent.com/hds-sandbox/NGS_summer_course_Aarhus/docker/scripts/courseMaterial.sh | bash\n\n```\n\n\n**7.** You will see a lot of messages, which is normal. At the end of the messages, you are provided two links looking as in the image below. Write down the node name and the user id highlighted in the circles.\n\n![](../img/nodeAndUsername.png){width=600px}\n\n\nWrote down node and ID? Last step is to create a tunnel between your computer and genomeDK to be able to see jupyterlab in your browser. Now you need to **use the node name and the user id** you wrote down before! **Open a new terminal window** on your laptop and write\n\n```{.bash}\n\nssh -L USERID:NODENAME:USERID USERNAME@login.genome.au.dk\n\n```\n\nwhere you substitute `USERID` and `NODENAME` as you wrote down before, and then USERNAME is your account name on GenomeDK. For example `ssh -L 6835:s21n81:6835 samuele@login.genome.au.dk` according to the figure above for a user with name `samuele`.\n\n**8.** Open your browser and go to the address http://127.0.0.1:USERID/lab, where you need your user id again instead of USERID. For example `http://127.0.0.1:6835/lab` from the figure above. Jupyterlab opens in your browser.\n\n\n**9.** Now you are ready to use JupyterLab for coding. Use the file browser (on the left-side) to find the folder `Notebooks`. Select one of the four tutorials of the course. You will see that the notebook opens on the right-side pane. Read the text of the tutorial and execute each code cell starting from the first. You will see results showing up directly on the notebook!\n\n![](../img/startNotebook.gif)\n\n:::{.callout-tip}\n\nRight click on a notebook or a saved results file, and use the download option to save it locally on your computer.\n\n:::\n\n### What if my internet connection drops?\n\nNow worries, `tmux` kept your material up and running. You only need a new terminal window to run the tunneling\n\n```{.bash}\n\nssh -L USERID:NODENAME:USERID USERNAME@login.genome.au.dk\n\n```\n\nas you did before, so you can continue working!\n\n\n### Recovering the material from your previous session\n\nDo you want to work again on the course material, or recover some analysis? Everything is saved in the folder you were working in. Next time, follow the whole procedure again (without step number **3.**) and you can be up and running the course in no time.\n","srcMarkdownNoYaml":"\n\nIf you are using GenomeDK, you have two options. One is to use a pre-packaged Docker container, which contains jupyterlab and the necessary packages to run all the notebooks. GenomeDK comes with `singularity`, which can import and execute Docker containers and is able to ensure full reproducibility of the analysis. The second option is to download the github repository of the course and create your own conda environment: this solution works also on any computing cluster where you can have `conda` installed and is shown in the page dedicate to the access with [any computing cluster](./otherHPC.qmd).\n\n:::{.callout-warning title=\"Technical prerequisites\"}\n\n- if you do not yet have an account on GenomeDK, please get one [Click on this link to get to the account request.](https://console.genome.au.dk/user-requests/create/) and follow the instructions for the 2-factor authentication.\n\n- you need to have (or be part of) an active project on GenomeDK. This ensures you can get some computing resources to run the course material. [Follow these instructions to request a project.](https://genome.au.dk/docs/projects-and-accounting/#requesting-a-project). Please do not create a project only to run this course, but use an existing project folder.\n\n- In Windows and the Powershell command line, commands might need `.exe` at the end, such as `ssh.exe` instead of `ssh`. Newer versions of Windows do not require that, though.\n:::\n\n## Singularity container\n\n**1.** Log into the cluster using the command line, and substituting `USERNAME` with your actual user name:\n\n```{.bash}\nssh USERNAME@login.genome.au.dk\n```\n\nand be sure to run those two commands to remove space-filling cache data, which can make everything slower after a few times you run tutorials\n\n```{.bash}\n\nrm -rf ~/.apptainer/cache/*\nrm -rf ~/.singularity/cache/*\n\n```\n\n**2.** Get into a folder inside your project, for example\n\n```{.bash}\n\ncd MYPROJECT/ngsSummerSchool\n\n```\n\n:::{.callout-warning}\n\nDo not work directly in your home folder `/home/username`, as this has a limit of 100GB of space available. Work instead inside a previously established project folder. \n\n:::\n\n**3.** Use `singularity` to download the container of the course. This will take some time and show a lot of text, and at the end a file called `course.sif` is created into the folder.\n\n```{.bash}\n\nsingularity pull course.sif docker://hdssandbox/ngssummerschool:2024.07\n\n```\n\n:::{.callout-warning}\n\nYou need to do this step only once!\n\n:::\n\n**4.**  Activate `tmux`: this will make things run in backround. If you lose your internet connection, the course material will still be up and running when the connection is back on your pc! Use the command \n\n\n```{.bash}\n\ntmux\n\n```\n\nThe command line will change a bit its aspect. Now it's time to get a few resources to run all the material. We suggest one CPU and 32GB of RAM for the first three modules, and 2 CPUs and 64GB of RAM for the single-cell analysis. For the first configuration suggested, for example, you get resources using \n\n```{.bash}\nsrun --mem=32g --cores=1 --time=4:0:0  --account=MYPROJECT --pty /bin/bash\n\n```\n\n:::{.callout-note}\n\nNote you always need your project name, and you can also choose for how long you want the resources to be available to you. **Asking for resources means waiting for some time in a queue before they are assigned.** \n\nIn the example above `time` is 4 hours. After this time, whatever you are doing will be closed, so be sure to save your work in progress.\n\n:::\n\n**5.**  execute the container with \n\n```{.bash}\nsingularity exec course.sif /bin/bash\n```\n\nNote that the command line shows now `Apptainer>` on its left. We are *inside* the container and the tools we need are now available into it.\n\n**6.** Now we need to run a configuration script, which will setup the last details and execute jupyterlab. If a folder called `Data` exists, it will not be downloaded again (also meaning that you can use our container with your own data folder for your own analysis in future)\n\n```{.bash}\ngit config --global http.sslVerify false\nwget -qO-  https://raw.githubusercontent.com/hds-sandbox/NGS_summer_course_Aarhus/docker/scripts/courseMaterial.sh | bash\n\n```\n\n\n**7.** You will see a lot of messages, which is normal. At the end of the messages, you are provided two links looking as in the image below. Write down the node name and the user id highlighted in the circles.\n\n![](../img/nodeAndUsername.png){width=600px}\n\n\nWrote down node and ID? Last step is to create a tunnel between your computer and genomeDK to be able to see jupyterlab in your browser. Now you need to **use the node name and the user id** you wrote down before! **Open a new terminal window** on your laptop and write\n\n```{.bash}\n\nssh -L USERID:NODENAME:USERID USERNAME@login.genome.au.dk\n\n```\n\nwhere you substitute `USERID` and `NODENAME` as you wrote down before, and then USERNAME is your account name on GenomeDK. For example `ssh -L 6835:s21n81:6835 samuele@login.genome.au.dk` according to the figure above for a user with name `samuele`.\n\n**8.** Open your browser and go to the address http://127.0.0.1:USERID/lab, where you need your user id again instead of USERID. For example `http://127.0.0.1:6835/lab` from the figure above. Jupyterlab opens in your browser.\n\n\n**9.** Now you are ready to use JupyterLab for coding. Use the file browser (on the left-side) to find the folder `Notebooks`. Select one of the four tutorials of the course. You will see that the notebook opens on the right-side pane. Read the text of the tutorial and execute each code cell starting from the first. You will see results showing up directly on the notebook!\n\n![](../img/startNotebook.gif)\n\n:::{.callout-tip}\n\nRight click on a notebook or a saved results file, and use the download option to save it locally on your computer.\n\n:::\n\n### What if my internet connection drops?\n\nNow worries, `tmux` kept your material up and running. You only need a new terminal window to run the tunneling\n\n```{.bash}\n\nssh -L USERID:NODENAME:USERID USERNAME@login.genome.au.dk\n\n```\n\nas you did before, so you can continue working!\n\n\n### Recovering the material from your previous session\n\nDo you want to work again on the course material, or recover some analysis? Everything is saved in the folder you were working in. Next time, follow the whole procedure again (without step number **3.**) and you can be up and running the course in no time.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"genomedk.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","theme":{"light":["materia","../css/materialight.scss"],"dark":"darkly"},"layout":"webpage","title":"Accessing the GWAS workshop on GenomeDK","parent":"Access","has_children":false,"nav_order":2,"hide":["footer","toc"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}